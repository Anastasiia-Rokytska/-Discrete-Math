#include<iostream>
using namespace std;
#define INF 999
int V, starting_point;
int temp;
int incidental_matrix[30][30] = {
	   {0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {4,0,1,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,1,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,1,0,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,3,0,5,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,5,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {6,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,8,0,0,0,0,2,0,1,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,3,0,0,0,0,1,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,1,0,0,0,0,4,0,2,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,3,0,0,0,0,2,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,7,0,0,0,0,4,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,3,0,0,0,0,0,0,1,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,7,0,0,0,0,1,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,4,0,0,0,0,7,0,5,0,0,0,0,8,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,5,0,2,0,0,0,0,4,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,2,0,0,0,0,0,0,5,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,7,0,0,0,0,3,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,7,0,3,0,0,0,0,2,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,3,0,1,0,0,0,0,3,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,1,0,1,0,0,0,0,8,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,8,0,0,0,0,1,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,8,0,0,0,0,0,0,7},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,4,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,4,0,7,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,7,0,3,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,3,0,3,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,6},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,6,0}
};

int shortest_dist[30];
bool visited[30] = { 0 };
int parent[30];
int getNearest() {
	int minValue = 999, minNode = 0;
	for (int i = 0; i < V; i++) {
		if (!visited[i] && shortest_dist[i] < minValue) {
			minValue = shortest_dist[i];
			minNode = i;
		}
	}
	return minNode;

}

int main(void) {
	V = 30;
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			if (incidental_matrix[i][j] == 0 && i != j) {
				incidental_matrix[i][j] = 999;
			}
		}
	}
	starting_point = 0;
	for (int i = 0; i < V; i++) {
		parent[i] = i;
		shortest_dist[i] = INF;
	}
	shortest_dist[starting_point] = 0;

	for (int i = 0; i < V; i++) {
		int nearest = getNearest();
		visited[nearest] = true;
		for (int adj = 0; adj < V; adj++) {
			if (incidental_matrix[nearest][adj] != INF && shortest_dist[adj] > shortest_dist[nearest] + incidental_matrix[nearest][adj]) {
				shortest_dist[adj] = shortest_dist[nearest] + incidental_matrix[nearest][adj];
				parent[adj] = nearest;
			}
		}
	}

	cout << "Cost : \t\t\tPath" << endl;
	cout << shortest_dist[V - 1] << "\t\t\t" << " ";
	cout << V << " ";
	temp = parent[V - 1];
	while (temp != starting_point) {
		if (temp == 1) {
			cout << " <- " << temp + 1 << " <- 1";

		}
		else {
			cout << " <- " << temp + 1 << " ";
		}
		temp = parent[temp];
	}
	cout << endl;

	return 0;
}
